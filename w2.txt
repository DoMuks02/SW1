4) grep
- matching
- 대소문자 구분함
- 라인 전체를 출력한다.
 grep The animals.txt
 > The를 가지고 있는 줄 출력 (The 붉게 출력)
Q. The가 있는 txt파일을 전체 조회하라 : *
 grep The *.txt
 - -v : 조건 문자열이 없는 라인 출력
  grep -v The animals.txt

Q. /user/lib에 포함된 하위 디렉터리 개수 알아내기
 - ls -l /user/lib | grep d | wc -l (X)
 - ls -l /user/lib | cut -c1 | grep d

5) sort
- 정렬. 오름차순 (abcd...)
- -r (reversed)
- 숫자 정렬 (-n)
 sort -n -r sample.txt
 sort -nr sample.txt
Q1. animals.txt 3번째 필드가 숫자 => 오름차순 정렬해서 출력하자.
 cut -f3 animals.txt | sort -n
 
Q2. 최소값 최대값 찾기
 cut -f3 animals.txt | sort -n | head -n1
 cut -f3 animals.txt | sort -nr | head -n1

Q3. /etc/passwd 디렉털에서 사용자 이름 정렬하여 추출하기
 head /etc/passswd | cut -d: -f1 | sort
 
Q4. 사용자 중 root가 있는지 확인하기 (존재하는 라인만 출력)
 head /etc/passwd | cut -d: -f1 | grep root
  - 대소문자를 구분하기 때문에(Root, root, ROOT 주의)
  - root 'abcdroot'
  - _root_ => -w

  root, broot, bayroot, rootfile, .....
  "root"
  -w
  
전체 출력
 head -n100 /etc/passwd | cut -d: -f1 | sort

Q5. ls, head

 - ls : 파일, 디렉터리 목록
 - head : 파일 내용 조회

# letters 내용 조회하기
 head letters

6) uniq
- 중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만

uniq -c letters(몇번 중복되었는지 횟수를 보여줌)

Q6. 성적표 (grades 파일)에서 가장 빈번하지 않은 등급부터 출력하기
 cut -f1 grades | sort | uinq -c | cut -f1 | sort -n

 * sort -> uniq
   AAAAABBBBBCCCCCC -> ABC
 * uniq -> sort
   ACBC -> AABC

 -> sort -n
 1 C
 2 A
 -> sort
 1 C

 * -d
 - f
 - rev c1
 - c9
 -------------------

 #1. 버전 관리
  - 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내올 수 있는 시스템
  - 협업
  - 툴 : 깃

  #2. 깃
   - 데이터 저장 방식 : 스냅샷
   - 오프라인
    - if 빈 -> 텍스트 입력 -> 빈 파일
    - 키(key) - 밸류(value)
     - 키는 고유하다.
     - 밸류 (텍스트)

  - 깃 상태
    - 수정 : 파일이 변경된 상태
    - 커밍 : 저장
    - 스테이지 : 스냅샷 찍어서 커밋할 준비가 된 상태

    - 수정
    - 스테이지 -> 커밋

  - 깃 커밋 순서:
    상태 체크 -> (수정) -> 스테이징 -> 커밋
    ....

1) 버전 체크
 git --version
  * git -v --version
  ls -l
  ls --list (x)

2) 사용자 정보 설정하기
 - name
  git config --global user.name domuk
 - email
  git config --global user.email 02dwl777@gmail.com
 - 옵션 : --global : 전체 시스템에 영향을 준다.
  - 프로젝트마다 다른 이름을 사용하고 싶을 경우는 옵션을 제외함

  - core.editor
   - vi 빠져나올 때는 :q + enter

  - git help <프로그램명>

  # 디렉터리 (directory)
   - 우리가 말하는 "폴더"
   - 트리구조를 가진
   animals/
    - name.txt
    - age.txt
    mammals/
     - cow.txt
    reptile/
     -

     
  - 하위 디렉터리 (child) - animals > mammals
  - 상위 디렉터리 (parent) - mammals > animals
  - 형제 디렉터리 (sibling)

  - /로 구분함
  animals/mammals/cow.txt
   <디렉터리 / ..../ 파일명>
  - / : 루트 디렉터리

  - 절대경로 : 루트에서부터 시작
  - 상대경로 : 현재 기준
   - 나의 현재 위치가 mammals이다. 근데 위로 가고 싶다.
    1) 절대경로 : /....../mammals
    2) 상대경로: 
     .. : 부모 디렉터리
     . : 현재
    - cd : change directory

     예 : cd ./mammals
       cd ..

  - pwd, cd
  - .. .
  -mkdir

  Q. new_dir로 이동해서 디렉터리 "dir2" 만들어보기
   mkdir dir2

  3) 깃 초기화
    git init: .git에 모든 변경사항(스냅샷)이 저장이 된다.

  4) 상태 체크
   git status

   깃이 모르는 파일일 경우
   untracked -> 'add' -> 'tracked'

   add -> commit

  [main (root-commit) f37df1e] init commit
  1file changed, 7 interested
  좀 더 있는데..